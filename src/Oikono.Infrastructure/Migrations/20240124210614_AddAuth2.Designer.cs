// <auto-generated />

using System;
using Oikono.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Oikono.Infrastructure.Migrations
{
    [DbContext(typeof(OikonoDbContext))]
    [Migration("20240124210614_AddAuth2")]
    partial class AddAuth2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Oikono")
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Oikono.Domain.Users.Permission", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnOrder(0);

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 191, DateTimeKind.Utc).AddTicks(2429))
                    .HasColumnOrder(102);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<DateTime>("UpdatedAt")
                    .ValueGeneratedOnUpdate()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 191, DateTimeKind.Utc).AddTicks(2969))
                    .HasColumnOrder(104);

                b.HasKey("Id");

                b.ToTable("Permission", "Oikono");

                b.HasData(
                    new
                    {
                        Id = new Guid("b1084a95-2654-44f2-bf7b-8a18e478c6db"),
                        CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        Name = "Get",
                        UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    },
                    new
                    {
                        Id = new Guid("bf65a940-ee0e-40d6-84d2-d8fe61a3865a"),
                        CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        Name = "Set",
                        UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    });
            });

            modelBuilder.Entity("Oikono.Domain.Users.Policy", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnOrder(0);

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 192, DateTimeKind.Utc).AddTicks(4944))
                    .HasColumnOrder(102);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<DateTime>("UpdatedAt")
                    .ValueGeneratedOnUpdate()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 192, DateTimeKind.Utc).AddTicks(5302))
                    .HasColumnOrder(104);

                b.HasKey("Id");

                b.ToTable("Policy", "Oikono");

                b.HasData(
                    new
                    {
                        Id = new Guid("7f109a54-8f28-4931-85d6-75dfdf12cbfb"),
                        CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        Name = "SelfOrAdmin",
                        UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    });
            });

            modelBuilder.Entity("Oikono.Domain.Users.RefreshToken", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnOrder(0);

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 193, DateTimeKind.Utc).AddTicks(6018))
                    .HasColumnOrder(102);

                b.Property<Guid>("CreatedBy")
                    .HasColumnType("uuid")
                    .HasColumnOrder(101);

                b.Property<bool>("Disabled")
                    .HasColumnType("boolean");

                b.Property<DateTime>("Expires")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Token")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("UpdatedAt")
                    .ValueGeneratedOnUpdate()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 193, DateTimeKind.Utc).AddTicks(8073))
                    .HasColumnOrder(104);

                b.Property<Guid>("UpdatedBy")
                    .HasColumnType("uuid")
                    .HasColumnOrder(103);

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("CreatedBy");

                b.HasIndex("UpdatedBy");

                b.HasIndex("UserId");

                b.ToTable("RefreshToken", "Oikono");
            });

            modelBuilder.Entity("Oikono.Domain.Users.Role", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnOrder(0);

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 213, DateTimeKind.Utc).AddTicks(3796))
                    .HasColumnOrder(102);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<DateTime>("UpdatedAt")
                    .ValueGeneratedOnUpdate()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 213, DateTimeKind.Utc).AddTicks(4463))
                    .HasColumnOrder(104);

                b.HasKey("Id");

                b.ToTable("Role", "Oikono");

                b.HasData(
                    new
                    {
                        Id = new Guid("9ad3203f-fa5d-4891-8ac0-640acbd36c33"),
                        CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        Name = "Admin",
                        UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    });
            });

            modelBuilder.Entity("Oikono.Domain.Users.User", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnOrder(0);

                b.Property<bool>("Active")
                    .HasColumnType("boolean");

                b.Property<DateTime>("BirthDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 213, DateTimeKind.Utc).AddTicks(9310))
                    .HasColumnOrder(102);

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnType("character varying(128)");

                b.Property<DateTime>("UpdatedAt")
                    .ValueGeneratedOnUpdate()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 214, DateTimeKind.Utc).AddTicks(290))
                    .HasColumnOrder(104);

                b.HasKey("Id");

                b.ToTable("User", "Oikono");
            });

            modelBuilder.Entity("Oikono.Domain.Users.UserPermission", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnOrder(0);

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 215, DateTimeKind.Utc).AddTicks(200))
                    .HasColumnOrder(102);

                b.Property<Guid>("PermissionId")
                    .HasColumnType("uuid");

                b.Property<DateTime>("UpdatedAt")
                    .ValueGeneratedOnUpdate()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 215, DateTimeKind.Utc).AddTicks(532))
                    .HasColumnOrder(104);

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasAlternateKey("UserId", "PermissionId");

                b.HasIndex("PermissionId");

                b.ToTable("UserPermission", "Oikono");
            });

            modelBuilder.Entity("Oikono.Domain.Users.UserPolicy", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnOrder(0);

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 216, DateTimeKind.Utc).AddTicks(9237))
                    .HasColumnOrder(102);

                b.Property<Guid>("PolicyId")
                    .HasColumnType("uuid");

                b.Property<DateTime>("UpdatedAt")
                    .ValueGeneratedOnUpdate()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 216, DateTimeKind.Utc).AddTicks(9651))
                    .HasColumnOrder(104);

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasAlternateKey("UserId", "PolicyId");

                b.HasIndex("PolicyId");

                b.ToTable("UserPolicy", "Oikono");
            });

            modelBuilder.Entity("Oikono.Domain.Users.UserRole", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnOrder(0);

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 219, DateTimeKind.Utc).AddTicks(586))
                    .HasColumnOrder(102);

                b.Property<Guid>("RoleId")
                    .HasColumnType("uuid");

                b.Property<DateTime>("UpdatedAt")
                    .ValueGeneratedOnUpdate()
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValue(new DateTime(2024, 1, 24, 21, 6, 14, 219, DateTimeKind.Utc).AddTicks(1068))
                    .HasColumnOrder(104);

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasAlternateKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("UserRole", "Oikono");
            });

            modelBuilder.Entity("Oikono.Domain.Users.RefreshToken", b =>
            {
                b.HasOne("Oikono.Domain.Users.User", "CreatedByUser")
                    .WithMany()
                    .HasForeignKey("CreatedBy")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("Oikono.Domain.Users.User", "UpdatedByUser")
                    .WithMany()
                    .HasForeignKey("UpdatedBy")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("Oikono.Domain.Users.User", "User")
                    .WithMany("RefreshTokens")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("CreatedByUser");

                b.Navigation("UpdatedByUser");

                b.Navigation("User");
            });

            modelBuilder.Entity("Oikono.Domain.Users.UserPermission", b =>
            {
                b.HasOne("Oikono.Domain.Users.Permission", "Permission")
                    .WithMany("UserPermissions")
                    .HasForeignKey("PermissionId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Oikono.Domain.Users.User", "User")
                    .WithMany("UserPermissions")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Permission");

                b.Navigation("User");
            });

            modelBuilder.Entity("Oikono.Domain.Users.UserPolicy", b =>
            {
                b.HasOne("Oikono.Domain.Users.Policy", "Policy")
                    .WithMany("UserPolicies")
                    .HasForeignKey("PolicyId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Oikono.Domain.Users.User", "User")
                    .WithMany("UserPolicies")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Policy");

                b.Navigation("User");
            });

            modelBuilder.Entity("Oikono.Domain.Users.UserRole", b =>
            {
                b.HasOne("Oikono.Domain.Users.Role", "Role")
                    .WithMany("UserRoles")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Oikono.Domain.Users.User", "User")
                    .WithMany("UserRoles")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Role");

                b.Navigation("User");
            });

            modelBuilder.Entity("Oikono.Domain.Users.Permission", b => { b.Navigation("UserPermissions"); });

            modelBuilder.Entity("Oikono.Domain.Users.Policy", b => { b.Navigation("UserPolicies"); });

            modelBuilder.Entity("Oikono.Domain.Users.Role", b => { b.Navigation("UserRoles"); });

            modelBuilder.Entity("Oikono.Domain.Users.User", b =>
            {
                b.Navigation("RefreshTokens");

                b.Navigation("UserPermissions");

                b.Navigation("UserPolicies");

                b.Navigation("UserRoles");
            });
#pragma warning restore 612, 618
        }
    }
}